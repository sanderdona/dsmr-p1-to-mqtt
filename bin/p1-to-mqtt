#!/usr/bin/env python3

import os
import sys
import argparse
import asyncio
import logging.config
import uuid

root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
sys.path.append(root_path)

from reader import TelegramToMqtt, SerialPort
from reader.domain import MqttConfig

LOGGING_CONFIG = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.StreamHandler',
            'stream': 'ext://sys.stdout',
        },
        'file': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'log/p1-to-mqtt.log',
            'maxBytes': 2048,
            'backupCount': 3,
        },
    },
    'loggers': {
        '': {
            'handlers': ['default', 'file'],
            'level': 'INFO',
        },
    },
}


async def run_with_interval(interval, function):
    while True:
        await asyncio.gather(
            asyncio.sleep(interval),
            function(),
        )


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Start the DSMR-P1 to MQTT reader")
    parser.add_argument("--port", type=str, default="/dev/ttyUSB1", help="serial device to read")
    parser.add_argument("--interval", type=int, default=5, help="Interval in seconds to read and publish")
    parser.add_argument("--mqtt_host", type=str, help="MQTT broker address", required=True)
    parser.add_argument("--mqtt_port", type=int, default=1883, help="MQTT broker port")
    parser.add_argument("--mqtt_user", type=str, help="MQTT username", required=True)
    parser.add_argument("--mqtt_pass", type=str, help="MQTT password", required=True)
    parser.add_argument("--mqtt_base_topic", type=str, default="dsmr/reading/", help="MQTT base topic")
    parser.add_argument("--mqtt_client_id", type=str, default="dsmr-reader", help="MQTT client id")
    commandline_arguments = parser.parse_args()

    logging.config.dictConfig(LOGGING_CONFIG)
    logging.info("Starting DSMR P1 to MQTT")

    mqtt_host = commandline_arguments.mqtt_host
    mqtt_port = commandline_arguments.mqtt_port
    mqtt_user = commandline_arguments.mqtt_user
    mqtt_pass = commandline_arguments.mqtt_pass
    mqtt_base_topic = commandline_arguments.mqtt_base_topic
    mqtt_client_id = commandline_arguments.mqtt_client_id + "-" + str(uuid.uuid4())
    mqtt_config = MqttConfig(mqtt_host, mqtt_port, mqtt_user, mqtt_pass, mqtt_base_topic, mqtt_client_id)

    serial_port = SerialPort(commandline_arguments.port)
    telegram_to_mqtt = TelegramToMqtt(serial_port, mqtt_config)

    interval_time = commandline_arguments.interval
    logging.debug(f"Reading and publishing with an interval of {interval_time} seconds")
    asyncio.run(run_with_interval(interval_time, telegram_to_mqtt.handle_new_telegram))
