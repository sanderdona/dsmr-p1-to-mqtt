#!/usr/bin/env python3

import os
import sys
import asyncio
import logging.config
import uuid

root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
sys.path.append(root_path)

from strictyaml import load, Map, Int, Str, Optional, exceptions
from reader import TelegramToMqtt, SerialPort
from reader.domain import MqttConfig

LOGGING_CONFIG = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.StreamHandler',
            'stream': 'ext://sys.stdout',
        },
        'file': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': f'{root_path}/log/p1-to-mqtt.log',
            'maxBytes': 2048,
            'backupCount': 3,
        },
    },
    'loggers': {
        '': {
            'handlers': ['default', 'file'],
            'level': 'INFO',
        },
    },
}


async def run_with_interval(interval, function):
    while True:
        await asyncio.gather(
            asyncio.sleep(interval),
            function(),
        )


if __name__ == "__main__":

    logging.config.dictConfig(LOGGING_CONFIG)
    logging.info("Starting DSMR P1 to MQTT")

    schema = Map({
        Optional("port", "/dev/ttyUSB0"): Str(),
        Optional("interval", 5): Int(),
        "mqtt": Map({
            "host-address": Str(),
            "host-port": Int(),
            "username": Str(),
            "password": Str(),
            Optional("root-topic", "dsmr/reading/"): Str(),
            Optional("client-id", "dsmr-reader"): Str()
        })
    })
    config_file = "config.yaml"

    try:
        properties = load(open(root_path + "/" + config_file).read(), schema)
    except FileNotFoundError as e:
        logging.error(f"Config file '{config_file}' not found")
        sys.exit(1)
    except exceptions.YAMLValidationError as e:
        logging.error(f"Failed to read {config_file}: {e.problem}")
        sys.exit(1)

    mqtt_properties = properties.get("mqtt")
    mqtt_host = mqtt_properties.get("host-address").text
    mqtt_port = mqtt_properties.get("host-port").data
    mqtt_user = mqtt_properties.get("username").text
    mqtt_pass = mqtt_properties.get("password").text
    mqtt_root_topic = mqtt_properties.get("root-topic").text
    mqtt_client_id = mqtt_properties.get("client-id").text + "-" + str(uuid.uuid4())
    mqtt_config = MqttConfig(mqtt_host, mqtt_port, mqtt_user, mqtt_pass, mqtt_root_topic, mqtt_client_id)

    serial_port = SerialPort(properties.get("port").text)
    telegram_to_mqtt = TelegramToMqtt(serial_port, mqtt_config)

    interval_time = properties.get("interval").data
    logging.debug(f"Reading and publishing with an interval of {interval_time} seconds")
    asyncio.run(run_with_interval(interval_time, telegram_to_mqtt.handle_new_telegram))
